{"version":3,"sources":["App/Quotes.js","App.js","serviceWorker.js","index.js"],"names":["Quotes","divStyle","color","this","props","buttonStyle","background","className","style","chosenQuote","chosenAuthor","onClick","Component","colors","randomize","list","Math","floor","random","length","App","state","QuoteList","quote","author","setState","backgroundStyle","id","newQuote","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"g+YAwBeA,E,uKAnBP,IAAMC,EAAW,CACbC,MAAOC,KAAKC,MAAMF,OAEhBG,EAAc,CAChBC,WAAYH,KAAKC,MAAMF,OAG3B,OACA,yBAAKK,UAAU,WAAWC,MAAOP,GAC7B,wBAAIM,UAAU,YAAd,oBACA,wBAAIA,UAAU,SAASJ,KAAKC,MAAMK,YAAlC,KACA,wBAAIF,UAAU,UAAd,IAAyBJ,KAAKC,MAAMM,aAApC,KACA,4BAAQF,MAAOH,EAAaE,UAAU,SAASI,QAASR,KAAKC,MAAMO,SAAnE,kB,GAfSC,a,eCGfC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAE3M,SAASC,EAAUC,GACf,OAAOA,EAAKC,KAAKC,MAAMD,KAAKE,SAASH,EAAKI,S,IAyC/BC,E,kDArCb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IACDiB,MAAQ,CACTZ,YAAaK,EAAUQ,GAAWC,MAClCb,aAAcI,EAAUQ,GAAWE,OACnCtB,MAAOY,EAAUD,IALJ,E,uDAUjBV,KAAKsB,SAAS,CACVhB,YAAaK,EAAUQ,GAAWC,MAClCb,aAAcI,EAAUQ,GAAWE,OACnCtB,MAAOY,EAAUD,O,+BAGX,IAAD,OAEDa,EAAkB,CACtBpB,WAAYH,KAAKkB,MAAMnB,OAGzB,OACE,yBAAKyB,GAAG,OAAOnB,MAAOkB,GACpB,kBAAC,EAAD,CACEjB,YAAaN,KAAKkB,MAAMZ,YACxBC,aAAcP,KAAKkB,MAAMX,aACzBR,MAAOC,KAAKkB,MAAMnB,MAClBS,QAAS,kBAAI,EAAKiB,mB,GA7BZhB,aCCEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.261c37ed.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Quotes extends Component {\n    render () {\n\n        const divStyle = {\n            color: this.props.color\n        }\n        const buttonStyle = {\n            background: this.props.color\n        }\n\n        return (\n        <div className=\"quotebox\" style={divStyle}>\n            <h1 className=\"headline\">Quote of the day</h1>\n            <h2 className=\"quote\">{this.props.chosenQuote} </h2>\n            <h5 className=\"author\">-{this.props.chosenAuthor} </h5>\n            <button style={buttonStyle} className=\"button\" onClick={this.props.onClick} >New quote</button>\n        </div>\n    );\n    }\n}\n   \n\nexport default Quotes;\n","import React, { Component } from 'react';\nimport Quotes from \"./App/Quotes\"\nimport './App.css';\nimport QuoteList from \"./App/quotes.json\"\n\nconst colors = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', \"#472E32\", \"#BDBB99\", \"#77B1A9\", \"#73A857\", \"#d5c51d\", \"#d51d89\", \"#92145e\", \"#691dd5\", \"#d5691d\", \"#cbaef4\"];\n\nfunction randomize(list) {\n    return list[Math.floor(Math.random()*list.length)];\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n        chosenQuote: randomize(QuoteList).quote,\n        chosenAuthor: randomize(QuoteList).author,\n        color: randomize(colors),\n    }\n}\n\nnewQuote() {\n    this.setState({\n        chosenQuote: randomize(QuoteList).quote,\n        chosenAuthor: randomize(QuoteList).author,\n        color: randomize(colors),\n    })\n}\n    render() {\n\n      const backgroundStyle = {\n        background: this.state.color\n      }\n\n      return (\n        <div id=\"root\" style={backgroundStyle}>\n          <Quotes\n            chosenQuote={this.state.chosenQuote}\n            chosenAuthor={this.state.chosenAuthor}\n            color={this.state.color}\n            onClick={()=>this.newQuote()}\n          />\n        </div>\n\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}